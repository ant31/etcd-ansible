---
- name: Refresh Time Fact
  setup: filter=ansible_date_time

- name: Set Backup Directory
  set_fact:
    etcd_backup_file: "{{etcd_cluster_backup.directory}}/{{ansible_date_time.year}}/{{ansible_date_time.month}}/{{etcd_cluster_name}}-{{ansible_date_time.date}}_{{ansible_date_time.time}}-snapshot.db"
    etcd_backup_latest: "{{etcd_cluster_backup.directory}}/{{etcd_cluster_name}}-snapshot.db"

- name: Create Backup Directory
  file:
    path: "{{etcd_backup_file | dirname}}"
    state: directory
    owner: root
    group: root
    mode: 0600

- name: ETCD | Check if etcd cluster is healthy
  command: >-
    {{bin_dir}}/etcdctl --endpoints={{etcd_access_addresses}}
    --cert={{etcd_cert_paths.client.cert}}
    --cacert={{etcd_cert_paths.client.ca}}
    --key={{etcd_cert_paths.client.key}}
    endpoint health
  register: etcd_cluster_is_healthy
  changed_when: false
  retries: 4
  delay: "{{retry_stagger | default(5)}}"
  until: etcd_cluster_is_healthy.rc == 0
  ignore_errors: true
  environment:
    ETCDCTL_API: "3"

- name:
  fail:
    msg: >-
      Can't create a live backup, the cluster is not healthy.
      It's possible to try with `etcd_backup_offline=true` to create a backup from the 'member/snap/db' file
  when:
    - etcd_cluster_is_healthy is failed
    - not etcd_backup_offline | d(false) | bool
    - not etcd_force_backup | d(false) | bool

- name: Backup etcd v3 data
  command: >-
    {{bin_dir}}/etcdctl --endpoints={{etcd_client_url}}
    --cert={{etcd_cert_paths.client.cert}}
    --cacert={{etcd_cert_paths.client.ca}}
    --key={{etcd_cert_paths.client.key}}
    snapshot save "{{etcd_backup_file}}"
  register: etcd_snapshot
  environment:
    ETCDCTL_API: "3"
  when:
    - etcd_cluster_is_healthy is succeeded or etcd_force_backup|d(false)|bool

- name: backup from 'member/snap/db' file
  copy:
    remote_src: true
    src: "{{etcd_data_dir}}/member/snap/db"
    dest: "{{etcd_backup_file}}"
  when:
    - etcd_backup_offline | d(false) | bool
    - etcd_cluster_is_healthy is failed

- name: Copy latest snapshot
  copy:
    remote_src: true
    src:  "{{etcd_backup_file}}"
    dest: "{{etcd_backup_latest}}"

- import_tasks: "upload_object_storage.yaml"
  when:
    - etcd_upload_backup is defined
    - etcd_upload_backup.storage in ['gcs', 's3', 'aws']
