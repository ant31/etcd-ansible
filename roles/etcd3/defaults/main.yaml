---
etcd_action: none
etcd_ca_profiles: {'server': 'client', 'client': 'client', 'peer': 'peer'}
bin_dir: /opt/bin
etcd_config_dir: /etc/etcd
etcd_cert_dir: "{{ etcd_config_dir }}/ssl"
dns_domain: cluster.local
etcd_backup: yes
# etcd_upload_backup:
#   # storage: s3 or gcs
#   storage: s3
#   bucket:
#   access_key:
#   secret_key:
#   region:
#   s3_url:
#   metadata:
#     key: value

################
## DOWNLOADS
################
etcd_clusters:
  - name: default
    ports:
      client: 2389
      peer: 2390

etcd_cluster_name: default
etcd_ports:
  client: 2379
  peer: 2380

cfssl_version: 1.2


etcd_checksums:
  v3.2.24: 947849dbcfa13927c81236fb76a7c01d587bbab42ab1e807184cd91b026ebed7
  v3.3.10: 1620a59150ec0a0124a65540e23891243feb2d9a628092fb1edcc23974724a45

etcd_downloads:
  etcd:
    file: true
    enabled: true
    dest: "{{bin_dir}}/etcd-archive/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    sha256: "{{ etcd_checksums[etcd_version] | default(omit)}}"
    url: "{{ etcd_download_url }}"
    unarchive: true
    owner: "root"
    mode: "0755"
    groups:
      - etcd

etcd_certs_downloads:
  cfssl:
    file: true
    enabled: true
    dest: "{{bin_dir}}/cfssl"
    url: "https://pkg.cfssl.org/R{{cfssl_version}}/cfssl_linux-amd64"
    owner: "root"
    mode: "0755"
    groups:
      - etcd-cert-managers
      - etcd

  cfssljson:
    file: true
    enabled: true
    dest: "{{bin_dir}}/cfssljson"
    url: "https://pkg.cfssl.org/R{{cfssl_version}}/cfssljson_linux-amd64"
    owner: "root"
    mode: "0755"
    groups:
      - etcd-cert-managers
      - etcd

  cfssl-certinfo:
    file: true
    enabled: true
    dest: "{{bin_dir}}/cfssl-certinfo"
    url: "https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64"
    owner: "root"
    mode: "0755"
    groups:
      - etcd-cert-managers
      - etcd

###########
## CERTS
##########3
cert_expiry: 175200h


# Set to true to separate k8s events to a different etcd cluster
etcd_events_cluster_enabled: false


etcd_home: "/var/lib/etcd/"

etcd_cert_group: root
etcd_cert_user: root
# Note: This does not set up DNS entries. It simply adds the following DNS
# entries to the certificate
etcd_cert_alt_names:
  - "etcd.kube-system.svc.{{ dns_domain }}"
  - "etcd.kube-system.svc"
  - "etcd.kube-system"
  - "etcd"
etcd_cert_alt_ips: []

etcd_script_dir: "{{ bin_dir }}/etcd-scripts"

etcd_heartbeat_interval: 250
etcd_election_timeout: 5000

# etcd_snapshot_count: 10000

# Parameters for ionice
# -c takes an integer between 0 and 3 or one of the strings none, realtime, best-effort or idle.
# -n takes an integer between 0 (highest priority) and 7 (lowest priority)
# etcd_ionice: "-c2 -n0"

etcd_metrics: "basic"

## A dictionary of extra environment variables to add to etcd.env, formatted like:
##  etcd_extra_vars:
##    ETCD_VAR1: "value1"
##    ETCD_VAR2: "value2"
etcd_extra_vars: {}

# etcd_quota_backend_bytes: "2G"

etcd_compaction_retention: "8"

# Force clients like etcdctl to use TLS certs (different than peer security)
etcd_secure_client: true

# Enable peer client cert authentication
etcd_peer_client_auth: true

etcd_user:
    name: etcd
    comment: "Etcd user"
    createhome: yes
    home: "{{ etcd_home }}"
    system: yes
    shell: /bin/nologin

etcd_cert_paths:
  server:
    cert: "{{ etcd_cert_dir }}/{{ inventory_hostname }}/{{inventory_hostname}}-server.pem"
    key: "{{ etcd_cert_dir }}/{{ inventory_hostname }}/{{inventory_hostname}}-server-key.pem"
    ca: "{{ etcd_cert_dir }}/{{ inventory_hostname }}/client-ca.pem"
  client:
    cert: "{{ etcd_cert_dir }}/{{ inventory_hostname }}/{{inventory_hostname}}-client.pem"
    key: "{{ etcd_cert_dir }}/{{ inventory_hostname }}/{{inventory_hostname}}-client-key.pem"
    ca: "{{ etcd_cert_dir }}/{{ inventory_hostname }}/client-ca.pem"
  peer:
    cert: "{{ etcd_cert_dir }}/{{ inventory_hostname }}/{{inventory_hostname}}-peer.pem"
    key: "{{ etcd_cert_dir }}/{{ inventory_hostname }}/{{inventory_hostname}}-peer-key.pem"
    ca: "{{ etcd_cert_dir }}/{{ inventory_hostname }}/peer-ca.pem"
